# Ray.Di

> Ray.Di is a PHP dependency injection framework inspired by Google Guice. It provides a powerful and flexible way to manage dependencies in your PHP applications through constructor injection, setter injection, and assisted injection.

Ray.Di is a mature framework that has been actively maintained since 2015, supporting the latest PHP versions while maintaining backward compatibility. It follows the dependency injection pattern to create loosely coupled, testable, and maintainable code.

## Core Concepts

- **Dependency Injection**: Dependencies are injected from outside rather than created internally
- **Modules**: Configuration units that define how dependencies are resolved
- **Bindings**: Map interfaces to their implementations
- **Scopes**: Control the lifecycle of injected objects (Singleton, Prototype)
- **AOP Support**: Aspect-oriented programming for cross-cutting concerns

## Key Features

- Constructor injection without annotations
- Method injection with #[Inject] attribute
- Assisted injection for runtime dependencies
- Provider pattern support for lazy loading
- Contextual bindings for different implementations
- Built-in AOP support for method interception
- Multi-bindings for plugin architectures

## Getting Started

- [Overview](/manuals/1.0/en/Overview.md): Overview of Ray.Di framework
- [Motivation](/manuals/1.0/en/Motivation.md): Why use dependency injection
- [Getting Started](/manuals/1.0/en/GettingStarted.md): Introduction to dependency injection with Ray.Di
- [Installation](/manuals/1.0/en/Installation.md): How to install Ray.Di via Composer
- [Mental Model](/manuals/1.0/en/MentalModel.md): Understanding Ray.Di as a map of keys to providers
- [Tutorial](/manuals/1.0/en/Tutorial1.md): Step-by-step guide from manual DI to Ray.Di

## Core Features

- [Bindings](/manuals/1.0/en/Bindings.md): Core binding concepts
- [Scopes](/manuals/1.0/en/Scopes.md): Managing object lifecycles
- [Injections](/manuals/1.0/en/Injections.md): Different injection types

## Binding Types

- [Linked Bindings](/manuals/1.0/en/LinkedBindings.md): Map interfaces to implementations
- [Instance Bindings](/manuals/1.0/en/InstanceBindings.md): Bind to specific instances
- [Provider Bindings](/manuals/1.0/en/ProviderBindings.md): Use providers for complex object creation
- [Constructor Bindings](/manuals/1.0/en/ConstructorBindings.md): Bind to specific constructors
- [Untargeted Bindings](/manuals/1.0/en/UntargetedBindings.md): Bindings without specific targets
- [Binding Attributes](/manuals/1.0/en/BindingAttributes.md): Use qualifiers for multiple bindings of same type
- [Builtin Bindings](/manuals/1.0/en/BuiltinBindings.md): Built-in bindings provided by Ray.Di
- [Null Object Binding](/manuals/1.0/en/NullObjectBinding.md): Null object pattern support

## Advanced Features

- [AOP](/manuals/1.0/en/AOP.md): Method interception for cross-cutting concerns
- [Injecting Providers](/manuals/1.0/en/InjectingProviders.md): Inject providers for multiple instances and lazy loading
- [Multibindings](/manuals/1.0/en/Multibindings.md): Support for plugin architectures
- [Contextual Bindings](/manuals/1.0/en/ContextualBindings.md): Different implementations based on context
- [Object Life Cycle](/manuals/1.0/en/ObjectLifeCycle.md): PostConstruct for initialization after injection

## Best Practices

- [Best Practices Overview](/manuals/1.0/en/BestPractices.md): Overview of Ray.Di best practices
- [Minimize Mutability](/manuals/1.0/en/bp/MinimizeMutability.md): Use constructor injection for immutable objects
- [Inject Only Direct Dependencies](/manuals/1.0/en/bp/InjectOnlyDirectDependencies.md): Avoid injecting objects to get other objects
- [Avoid Static State](/manuals/1.0/en/bp/AvoidStaticState.md): Static state and testability are enemies
- [Organize Modules by Feature](/manuals/1.0/en/bp/OrganizeModulesByFeature.md): Group bindings by feature, not by type
- [Avoid Conditional Logic in Modules](/manuals/1.0/en/bp/AvoidConditionalLogicInModules.md): Keep modules simple and predictable
- [Modules Should Be Fast and Side Effect Free](/manuals/1.0/en/bp/ModulesShouldBeFastAndSideEffectFree.md): Module configuration best practices
- [Document Public Bindings](/manuals/1.0/en/bp/DocumentPublicBindings.md): Documentation practices for bindings
- [Don't Reuse Annotations](/manuals/1.0/en/bp/DontReuseAnnotations.md): Create specific annotations for each binding
- [Injecting the Injector](/manuals/1.0/en/bp/InjectingTheInjector.md): When and how to inject the injector
- [Cyclic Dependencies](/manuals/1.0/en/bp/CyclicDependencies.md): Handling circular dependencies

## Performance & Tools

- [Performance Boost](/manuals/1.0/en/PerformanceBoost.md): ScriptInjector and CachedInjector for production optimization
- [Grapher](/manuals/1.0/en/Grapher.md): Visualize object graphs and dependencies
- [Integration](/manuals/1.0/en/Integration.md): Integrating Ray.Di with other frameworks

## Additional Resources

- [Backward Compatibility](/manuals/1.0/en/BackwardCompatibility.md): Ray.Di's commitment to not breaking BC